* AD LIBITUM

  The Scheme Live Coding Environment. Built on Chez Scheme and libsoundio.

* Kernel

** Sound I/O

   Ad Libitum relies on =chez-soundio= bindings and high-level wrapper. We are
   going to create and open default i/o (only 'o' at the moment) stream and
   provide it globally.

   For performance reasons =chez-sound= itself doesn't provide any protection
   against broken =write-callback=. But in livecoding performance mistakes are
   the part of exploration and arguably we want to sacrifice some performance to
   be able to not restart entire sound subsystem for fixing our
   =write-callback=.

#+NAME: sound
#+BEGIN_SRC scheme
  (define (try thunk)
    (call/cc
     (lambda (k)
       (with-exception-handler
           (lambda (x) (k 0.0))
         thunk))))

  (define (safe-function f)
    (lambda args
      (try (lambda () (apply f args)))))

  (define (silence time channel) 0.0)

  (define *sound-out* (soundio:open-default-out-stream silence))

  (define (set-dsp! f)
    (soundio:sound-out-write-callback-set! *sound-out* (safe-function f)))

  (define (hush!) (set-dsp! silence))

  (define (start) (soundio:start-out-stream *sound-out*))
#+END_SRC

** Scheduler

  Much of music is about time. Before we produce any single sample of wave, we
  want to control when to start and when to stop doing it. Much of live coding
  is about decoupling our commands from their execution. We want to say "play
  note a second later" now, but play it a second later. It's where scheduler
  comes to play. Essentially, scheduler's API is simple and allows to get
  current time mark (whatever it means: system clock, time elapsed from
  scheduler start or number of rendered samples) and to callback procedure at
  some point of time with more or less guaranteed skew limit.

  To have scheduler in sync with audiostream it probably worth to couple it with
  write callback.

  Let's start with scheduler interface. As has been said there are two basic
  functions it must provide:

#+NAME: scheduler-interface
#+BEGIN_SRC scheme
  <<now>>
  <<schedule>>
#+END_SRC

  As far as scheduler is stateful and even involves thread creation, it must
  have two other basic methods:

#+NAME: scheduler-interface
#+BEGIN_SRC scheme
  <<start-scheduler>>
  <<stop-scheduler>>
#+END_SRC

  Let's shape scheduler's data. Obviously, =now= appears here, in form of either
  scheduler's own counter or function (which will get system time or related
  write thread sample number). Another thing is =queue=, where =schedule= will
  store callbacks. And =thread= id or flag or whatever used to control thread
  exit. And the last one which comes to the mind at the moment is =resolution=
  as a time duration of the longest sleep of scheduler thread before checking
  events ready to be fired.

#+NAME: scheduler-record
#+BEGIN_SRC scheme
  (define-record-type scheduler
    (fields now (mutable queue) resolution (mutable thread) mutex))

  (define (simple-scheduler)
    (make-scheduler
     current-time                         ; now
     heap/empty                           ; queue
     (make-time 'time-duration 1000000 0) ; resolution
     #f                                   ; thread
     (make-mutex)                         ; mutex
     ))
#+END_SRC

  =now= then would just call =now= field:

#+NAME: now
#+BEGIN_SRC scheme
  (define (now scheduler) ((scheduler-now scheduler)))
#+END_SRC

  Event queue accepts events which must have =f= with its
  =args= to execute at =time=:

#+NAME: event-record
#+BEGIN_SRC scheme
  (define-record-type event
    (fields time f args))

  (define (event-comparator e1 e2)
    (let ([t1 (event-time e1)]
          [t2 (event-time e2)])
      (cond
       [(time<? t1 t2) 1]
       [(time>? t1 t2) -1]
       [else 0])))
#+END_SRC

  For =queue= we need some heap implementation, I'm going to jump into [[Pairing
  Heap]]!

  Mutex is used to prevent data race on insert and remove from queue happening
  in different threads.

#+NAME: schedule
#+BEGIN_SRC scheme
  (define (schedule scheduler event)
    (with-mutex (scheduler-mutex scheduler)
                (scheduler-queue-set! scheduler (heap/insert event-comparator event (scheduler-queue scheduler)))))
#+END_SRC

  Processing events is just executing any expired events' functions and removing
  them from the queue. Note, that our current implementation is built on the
  assumption that scheduler's clock is based on =current-time=.

  To enable dynamic temporal recursion we evaluate event's =f= as a symbol to be
  resolved in a function, not as an immediate function value.

  Of course, live events are error prone, but we don't want flawed event to blow
  entire thread. Thus =f= execution is secured with =with-exception-handler=.

*** TODO make process-events scheduler clock type independent

*** CODE

#+NAME: process-events
#+BEGIN_SRC scheme
  (define (try thunk)
    (call/cc
     (lambda (k)
       (with-exception-handler
           (lambda (x) (k #f))
         thunk))))

  (define (process-events scheduler t)
    (with-mutex
     (scheduler-mutex scheduler)
     (let next-event ()
       (let ([event (heap/find-min (scheduler-queue scheduler))])
         (when (and event (time<=? (event-time event) t))
           (scheduler-queue-set! scheduler (heap/delete-min event-comparator (scheduler-queue scheduler)))
           (try
            (lambda ()
              (apply (eval (event-f event)) (event-args event))))
           (next-event))))))
#+END_SRC

  Now it's a time for start/stop thread. Stopping thread would be just setting a
  flag which I used to call "poison pill".

#+NAME: stop-scheduler
#+BEGIN_SRC scheme
  (define (stop-scheduler scheduler)
    (scheduler-thread-set! scheduler #f))
#+END_SRC

  Starting thread will fork and loop calling expired events.

*** TODO make sleeping scheduler clock type independent

*** CODE

#+NAME: start-scheduler
#+BEGIN_SRC scheme
  (define (start-scheduler scheduler)
    (fork-thread
     (lambda ()
       (scheduler-thread-set! scheduler (get-thread-id))
       (let ([zero-duration (make-time 'time-duration 0 0)]
             [resolution (scheduler-resolution scheduler)])
         (let loop ()
           (when (scheduler-thread scheduler)
             (let ([clock (current-time)]
                   [t (add-duration (now scheduler) resolution)])
               (process-events scheduler t)
               (let* ([day (time-difference (current-time) clock)]
                      [night (time-difference resolution day)])
                 (when (time<? zero-duration night)
                   (sleep night))
                 (loop)))))))))
#+END_SRC

#+NAME: scheduler
#+BEGIN_SRC scheme
  <<scheduler-record>>
  <<event-record>>
  <<process-events>>
  <<scheduler-interface>>
#+END_SRC

  We need just a simple default scheduler at hand for Ad Libitum needs:

#+NAME: easy-scheduler
#+BEGIN_SRC scheme
  (define *scheduler* (simple-scheduler))
  (define (start) (start-scheduler *scheduler*))
  (define (stop) (stop-scheduler *scheduler*))
  (define (*schedule* t f . args) (schedule *scheduler* (make-event t f args)))
  (define (*now*) (now *scheduler*))
#+END_SRC

*** Pairing Heap

   Wikipedia's type definition for pairing heap structure looks like Scheme's
   pairs (surprise =) ). Using them implementation is quite straightforward.

#+NAME: pairing-heap
#+BEGIN_SRC scheme
  ;; we do some #f-punning and don't throw on empty heaps

  (define heap/empty '())

  (define (heap/find-min heap)
    (if (null? heap)
        #f
        (car heap)))

  (define (heap/merge comparator h1 h2)
    (cond
     [(null? h1) h2]
     [(null? h2) h1]
     [(positive? (comparator (car h1) (car h2)))
      (cons (car h1) (cons h2 (cdr h1)))]
     [else
      (cons (car h2) (cons h1 (cdr h2)))]))

  (define (heap/insert comparator elem heap)
    (heap/merge comparator (cons elem '()) heap))

  (define (heap/merge-pairs comparator subheaps)
    (cond
     [(null? subheaps) heap/empty]
     [(null? (cdr subheaps)) (car subheaps)]
     [else (heap/merge comparator
            (heap/merge comparator (car subheaps) (cadr subheaps))
            (heap/merge-pairs comparator (cddr subheaps)))]))

  (define (heap/delete-min comparator heap)
    (if (null? heap)
        heap/empty
        (heap/merge-pairs comparator (cdr heap))))
#+END_SRC

** Remote REPL

  We need own repl server because music doesn't work in geiser repl for somewhat
  reason. The most universal solution would be to have REPL over either UDP or
  TCP with the simplest possible protocol. We want it to be just a carrier,
  everything else should happen inside editor and engine. Sadly Chez Scheme has
  no sockets in its std lib. We are gonna try Aaron W. Hsu's [[https://github.com/arcfide/chez-sockets][chez-sockets]]
  library.

  Actually, we are still able to use Geiser with our REPL server because it
  supports remote REPL. See "Connecting to an external Scheme" at [[http://www.nongnu.org/geiser/geiser_3.html#The-REPL][docs]]. The only
  thing required for it is to load =scheme/chez/geiser/geiser.ss= into the REPL
  thread.

  First, let's create a TCP socket. Here we rely on assumption, that default
  protocol is TCP.

*** TODO ensure that protocol is TCP

  Though Aaron doesn't recommend using blocking sockets, they are so much easier
  for out case! No need to implement polling when waiting for connection or
  receiving value.

  Tried blocking sockets. They work fine by themselves, but play bad with
  =sleep= called from other threads! Falling back to asyc sockets and polling then.

*** TODO proper socket closing

*** CODE

#+NAME: open-socket
  #+BEGIN_SRC scheme
    (define (open-socket)
      (let ([socket (sock:create-socket
                     sock:socket-domain/internet
                     sock:socket-type/stream
                     sock:socket-protocol/auto)])
        <<bind-socket>>
        <<listen-socket>>
        socket
        ))
  #+END_SRC

  Then we are going to listen address and port for input. We'll make it
  configurable later, let's provide some sensible hardcoded defaults for now.
  /localhost/ is for security reasons, and /37146/ is default Geiser port.

#+NAME: bind-socket
#+BEGIN_SRC scheme
  (sock:bind-socket socket (sock:string->internet-address "127.0.0.1:37146"))
#+END_SRC

  And then let's listen for new connections!

#+NAME: listen-socket
#+BEGIN_SRC scheme
  (sock:listen-socket socket 1024)
#+END_SRC

To actually accept new connections we are going to create new thread and just
run infinite look with =accept-socket= inside. Remember, our socket is blocking
so it would just wait for the next connection, not eat all CPU by eager calls.
After accepting new connection we'll proceed it in new thread.

#+NAME: accept-connections
#+BEGIN_SRC scheme
  (define (accept-connections repl-server-socket)
    (fork-thread
     (lambda ()
       (let loop ()
         (sleep polling-cycle)
         (let-values ([(socket address) (sock:accept-socket repl-server-socket)])
           (when socket
             (printf "New REPL @ ~s\r\n" (sock:internet-address->string address))
             (spawn-remote-repl socket address)))
         (loop)))))
#+END_SRC

*** TODO breakdown code, it's too large for one bite
*** TODO report exceptions to client
*** TODO stop loop on severe errors (which?)
*** TODO stop loop and close socket on disconnect

*** CODE

#+NAME: spawn-remote-repl
#+BEGIN_SRC scheme
  (define (try thunk)
    (call/cc
     (lambda (k)
       (with-exception-handler
           (lambda (x) (k #f))
         thunk))))

  (define max-chunk-length 65536)
  (define code-tx (make-transcoder (utf-8-codec) (eol-style lf) (error-handling-mode replace)))
  (define polling-cycle (make-time 'time-duration 50000000 0))

  (define (spawn-remote-repl socket address)
    (fork-thread
     (lambda ()
       (let* ([call-with-send-port
               (lambda (f)
                 (let ([response (call-with-bytevector-output-port f code-tx)])
                   (sock:send-to-socket socket response address)))]
              [send-prompt
               (lambda ()
                 (call-with-send-port (lambda (p) (display "> " p))))])
         (send-prompt)
         (let loop ()
           (sleep polling-cycle)
           (let-values ([(request address)
                         (sock:receive-from-socket socket max-chunk-length)])
             (if (and request (positive? (bytevector-length request)))
                 (call-with-port
                  (open-bytevector-input-port request code-tx)
                  (lambda (p)
                    (do ([x (read p) (read p)])
                        ((eof-object? x))
                      (printf "> ~s\r\n" x)
                      (call-with-send-port
                       (lambda (p)
                         (let* ([result #f]
                                [output (with-output-to-string
                                          (lambda ()
                                            (set! result
                                                  (try (lambda ()
                                                         (eval x))))))])
                           (printf "< ~s\r\n" result)
                           (display output p)
                           (display result p)
                           (newline p))
                         )))
                    (send-prompt)
                    (loop)))
                 (loop))))))))
#+END_SRC

#+NAME: start-repl-server
#+BEGIN_SRC scheme
  (define (start-repl-server)
    (accept-connections (open-socket)))
#+END_SRC

* Core

  Woohoo! Naive [[Kernel]] draft is here and we could start to explore Core basics
  of Sound. At this point Ad Libitum splits into into interwinded parts: the
  framework and the book. In the framework we are going to grow all necessary
  instruments for live coding. In the book we are going to use those instruments
  to experiment with sound.

** Math

   Before diving into the abyss of digital music let's define several useful
   basic math constants and functions.

#+NAME: basic-math
#+BEGIN_SRC scheme
  (define pi (* (asin 1.0) 2))
  (define +pi   3.14159265358979323846264)
  (define +pi/2 1.57079632679489661923132)
  (define +pi/4  .78539816339744830961566)
  (define -pi (- +pi))
  (define -pi/2 (- +pi/2))
  (define -pi/4 (- +pi/4))
  (define two-pi (* 2 pi))
#+END_SRC

** Generators

   Sound is about motion. About our mean of sensing somewhat periodic motion
   a.k.a waves. The higher is period, the higher is signal pitch. Waveform
   determines character of signal. And irregularities determine... Something.
   Noise? Personality? We'll try to discover.

   Though signal demonstration usually started with sine waveform as the most
   recognizable and surprisingly pleasant one, we are going to start with
   computationally simplest one (though potentially not the fastest to calculate).

   Technically, the simplest generator is just a constant value, no motion,
   silence. But which stands next in simplicity?

   It's the signal, which is in one position half of a time and in another position
   in another half. By "time" here I mean one cycle, one period of signal.

   But first let define a couple of constants to start with. It's a frequency we
   want to hear and its derivatives.

#+NAME: tuner-constants
#+BEGIN_SRC scheme
  (define tuner-frequency 440.0)
  (define tuner-period (/ 1.0 tuner-frequency))
  (define tuner-half-period (/ tuner-period 2.0))
#+END_SRC

#+NAME: simplest-oscillator
#+BEGIN_SRC scheme
  (define (simplest-oscillator time channel)
    (if (> (mod time tuner-period) tuner-half-period)
        1.0
        -1.0))
#+END_SRC

*** TODO add references section
*** TODO add to references link to interactive FFT tutorial

** Envelopes
** Samples & Wavetables
** Metronome

* Std

** FFT
** Filters
** Instruments
** Scales
** Rhythm

* Misc

  To import =chez-soundio= and =chez-sockets= we must add respective folders to =library-directories=
  To do that let's create a couple of helpers:

#+NAME: add-library-directories
#+BEGIN_SRC scheme
  (define (add-library-directory dir)
    (library-directories
     (cons dir (library-directories))))

  (define (add-library-directories . dirs)
    (unless (null? dirs)
      (add-library-directory (car dirs))
      (apply add-library-directories (cdr dirs))))

  (add-library-directories
   "./chez-soundio"
   "./chez-sockets")
#+END_SRC


  Also let's define several useful aliases and finally start our services:

#+NAME: ad-libitum-init
#+BEGIN_SRC scheme
  (define now scheduler:now)
  (define schedule scheduler:schedule)
  (define callback schedule)

  (sound:start)
  (scheduler:start)
  (repl:start-repl-server)
#+END_SRC

  Tuner stuff to test everything is working:

#+NAME: test-tuner
#+BEGIN_SRC scheme
  (define (sine time freq)
    (sin (* two-pi freq time)))

  (define (tuner time channel)
    ;; inexact because otherwise exact 0 would crash soundio
    (inexact (sine time tuner-frequency)))

  ;; (sound:set-dsp! tuner)
#+END_SRC

* Files :noexport:

#+BEGIN_SRC scheme :tangle ad-libitum.ss :noweb yes :mkdirp yes :paddle no
  <<add-library-directories>>
  (import (chezscheme)
          (prefix (sound) sound:)
          (prefix (scheduler) scheduler:)
          (prefix (repl) repl:))
  <<ad-libitum-init>>
  <<basic-math>>
  <<tuner-constants>>
  <<test-tuner>>
  <<simplest-oscillator>>
#+END_SRC

#+BEGIN_SRC scheme :tangle sound.ss :noweb yes :mkdirp yes :paddle no
  (library (sound (1))
    (export start set-dsp! hush!)
    (import (chezscheme) (prefix (soundio) soundio:))
    <<sound>>
    )
#+END_SRC

#+BEGIN_SRC scheme :tangle scheduler.ss :noweb yes :mkdirp yes :paddle no
  (library (scheduler)
    (export start stop
            (rename (*schedule* schedule) (*now* now)))
    (import (chezscheme))
    <<pairing-heap>>
    <<scheduler>>
    <<easy-scheduler>>
    )
#+END_SRC

#+BEGIN_SRC scheme :tangle repl.ss :noweb yes :mkdirp yes :paddle no
  (library (repl (1))
    (export start-repl-server)
    (import (chezscheme)
            (prefix (bsd-sockets) sock:))
    <<open-socket>>
    <<spawn-remote-repl>>
    <<accept-connections>>
    <<start-repl-server>>
    )
#+END_SRC

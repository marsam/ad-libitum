* AD LIBITUM

  The Scheme Live Coding Environment. Built on Chez Scheme and libsoundio.

* Getting Started

  This guide describes initial setup required to produce your first piece of
  digital noise with Ad Libitum. At the moment Ad Libitum is tested only on
  MacOS therefore following instructions are MacOS-specific. Any feedback and
  improvement for other platforms is more than welcome! Current state of Ad
  Libitum dependencies is that it should be easy to port it to Linux and
  moderately (but possible) to Windows.

** Chez Scheme

   First, you need Chez Scheme itself. Ad Libitum requires threaded version and
   you probably don't want to install x11 dependency, that's why better to do it
   from source, not brew.

*** Clone Chez Scheme repository

#+BEGIN_SRC shell
git clone https://github.com/cisco/ChezScheme.git
cd ChezScheme
#+END_SRC

*** Exclude X11 from dependencies

   Open =c/version.h= file in your favorite text editor and comment out line
   containing =libX11.dylib= reference:

#+BEGIN_SRC diff
modified   c/version.h
@@ -280,7 +280,7 @@ typedef char *memcpy_t;
 typedef int tputsputcchar;
 #define LOCKF
 #define DIRMARKERP(c) ((c) == '/')
-#define LIBX11 "/usr/X11R6/lib/libX11.dylib"
+/* #define LIBX11 "/usr/X11R6/lib/libX11.dylib" */
 #define _DARWIN_USE_64_BIT_INODE
 #define SECATIME(sb) (sb).st_atimespec.tv_sec
 #define SECCTIME(sb) (sb).st_ctimespec.tv_sec
#+END_SRC

*** Configure, build and install Chez Scheme

#+BEGIN_SRC shell
./configure --threads
make
sudo make install
#+END_SRC

*** Test it's working

    Run =scheme= from terminal and try to evaluate simple expression:

#+BEGIN_SRC shell
~/ChezScheme> scheme

Chez Scheme Version 9.4.1
Copyright 1984-2017 Cisco Systems, Inc.

> (+ 1 2 3)
6
>
#+END_SRC

** libsoundio

   This is library used by Ad Libitum for communication with your computer's
   sound system.

#+BEGIN_SRC shell
brew install libsoundio
#+END_SRC

** Ad Libitum itself

*** Install

   You need to clone repository and build several helping libraries.

#+BEGIN_SRC shell
git clone https://github.com/ul/ad-libitum.git
cd ad-libitum
git submodule update --init --recursive --remote
make
#+END_SRC

*** Test

    Fire up =scheme ad-libitum.ss= and play 440Hz tuner (beware of loud sound!
    reduce speakers/headphones volume before running). Congratulations, you
    livecoded your first Ad Libitum piece!

#+BEGIN_SRC scheme
~/ad-libitum> scheme ad-libitum.ss

Chez Scheme Version 9.4.1
Copyright 1984-2017 Cisco Systems, Inc.

> (sound:set-dsp! tuner)
>
#+END_SRC

*** Play

    Run & =geiser-connect=

#+BEGIN_SRC shell
scheme --optimize-level 2 violet.ss
#+END_SRC
* Contribution

Contribution is more than welcome and highly appreciated! Any small or non-code
fix is valuable as well, including spelling and grammar and setting proper
licensing.

* Kernel

** Sound I/O

   Ad Libitum relies on =chez-soundio= bindings and high-level wrapper. We are
   going to create and open default i/o (only 'o' at the moment) stream and
   provide it globally.

   For performance reasons =chez-sound= itself doesn't provide any protection
   against broken =write-callback=. But in livecoding performance mistakes are
   the part of exploration and arguably we want to sacrifice some performance to
   be able to not restart entire sound subsystem for fixing our
   =write-callback=.

#+NAME: sound
#+BEGIN_SRC scheme
  (define (silence time channel) 0.0)

  (define *sound-out* (soundio:open-default-out-stream silence))
  (define *sample-rate* (soundio:sound-out-sample-rate *sound-out*))
  (define *channels* (soundio:sound-out-channel-count *sound-out*))

  (define (set-dsp! f)
    (soundio:sound-out-write-callback-set! *sound-out* f))

  (define (hush!) (set-dsp! silence))

  (define (start) (soundio:start-out-stream *sound-out*))
#+END_SRC

** Scheduler

  Much of music is about time. Before we produce any single sample of wave, we
  want to control when to start and when to stop doing it. Much of live coding
  is about decoupling our commands from their execution. We want to say "play
  note a second later" now, but play it a second later. It's where scheduler
  comes to play. Essentially, scheduler's API is simple and allows to get
  current time mark (whatever it means: system clock, time elapsed from
  scheduler start or number of rendered samples) and to callback procedure at
  some point of time with more or less guaranteed skew limit.

  To have scheduler in sync with audiostream it probably worth to couple it with
  write callback.

  Let's start with scheduler interface. As has been said there are two basic
  functions it must provide:

#+NAME: scheduler-interface
#+BEGIN_SRC scheme
  <<now>>
  <<schedule>>
#+END_SRC

  As far as scheduler is stateful and even involves thread creation, it must
  have two other basic methods:

#+NAME: scheduler-interface
#+BEGIN_SRC scheme
  <<start-scheduler>>
  <<stop-scheduler>>
#+END_SRC

  Let's shape scheduler's data. Obviously, =now= appears here, in form of either
  scheduler's own counter or function (which will get system time or related
  write thread sample number). Another thing is =queue=, where =schedule= will
  store callbacks. And =thread= id or flag or whatever used to control thread
  exit. And the last one which comes to the mind at the moment is =resolution=
  as a time duration of the longest sleep of scheduler thread before checking
  events ready to be fired.

#+NAME: scheduler-record
#+BEGIN_SRC scheme
  (define-record-type scheduler
    (fields now (mutable queue) resolution (mutable thread) mutex))

  (define (simple-scheduler now)
    (make-scheduler
     now                                   ; now
     heap/empty                            ; queue
     (make-time 'time-duration 5000000 0)  ; resolution
     #f                                    ; thread
     (make-mutex)                          ; mutex
     ))
#+END_SRC

  =now= then would just call =now= field:

#+NAME: now
#+BEGIN_SRC scheme
  (define (now scheduler) ((scheduler-now scheduler)))
#+END_SRC

  Event queue accepts events which must have =f= with its
  =args= to execute at =time=:

#+NAME: event-record
#+BEGIN_SRC scheme
  (define-record-type event
    (fields time f args))
#+END_SRC

  For =queue= we need some heap implementation, I'm going to jump into [[Pairing
  Heap]]!

  Mutex is used to prevent data race on insert and remove from queue happening
  in different threads.

#+NAME: schedule
#+BEGIN_SRC scheme
  (define schedule
    (case-lambda
      [(scheduler event)
       (with-mutex (scheduler-mutex scheduler)
                   (scheduler-queue-set! scheduler (heap/insert event-time event (scheduler-queue scheduler))))]
      [(scheduler t f . args)
       (schedule scheduler (make-event t f args))]))
#+END_SRC

  Processing events is just executing any expired events' functions and removing
  them from the queue. Note, that our current implementation is built on the
  assumption that scheduler's clock is based on =current-time=.

  To enable dynamic temporal recursion we evaluate event's =f= as a symbol to be
  resolved in a function, not as an immediate function value.

  Of course, live events are error prone, but we don't want flawed event to blow
  entire thread. Thus =f= execution is secured with =try=.

#+NAME: process-events
#+BEGIN_SRC scheme
  (define (process-events scheduler t)
    (with-mutex
     (scheduler-mutex scheduler)
     (let next-event ()
       (let ([event (heap/find-min (scheduler-queue scheduler))])
         (when (and event (<= (event-time event) t))
           (scheduler-queue-set! scheduler (heap/delete-min event-time (scheduler-queue scheduler)))
           (try
            #f
            (let ([f (event-f event)])
              (apply (if (symbol? f)
                         (top-level-value f)
                         f)
                     (event-args event))))
           (next-event))))))
#+END_SRC

  Now it's a time for start/stop thread. Stopping thread would be just setting a
  flag which I used to call "poison pill".

#+NAME: stop-scheduler
#+BEGIN_SRC scheme
  (define (stop-scheduler scheduler)
    (scheduler-thread-set! scheduler #f))
#+END_SRC

  Starting thread will fork and loop calling expired events.

*** TODO make sleeping scheduler clock type independent

*** CODE

#+NAME: start-scheduler
#+BEGIN_SRC scheme
  (define (start-scheduler scheduler)
    (fork-thread
     (lambda ()
       (scheduler-thread-set! scheduler (get-thread-id))
       (let* ([zero-duration (make-time 'time-duration 1000 0)]
              [resolution (scheduler-resolution scheduler)]
              [fl-resolution (inexact (+ (time-second resolution)
                                         (* 1e-9 (time-nanosecond resolution))))])
         (let loop ()
           (when (scheduler-thread scheduler)
             (let ([clock (current-time)]
                   [t (+ (now scheduler) fl-resolution)])
               (process-events scheduler t)
               (let* ([day (time-difference (current-time) clock)]
                      [night (time-difference resolution day)])
                 (when (time<? zero-duration night)
                   (usleep 0 (div (time-nanosecond night) 1000)))
                 (loop)))))))))
#+END_SRC

#+NAME: scheduler
#+BEGIN_SRC scheme
  <<scheduler-record>>
  <<event-record>>
  <<process-events>>
  <<scheduler-interface>>
#+END_SRC

  We need just a simple default scheduler at hand for Ad Libitum needs:

#+NAME: easy-scheduler
#+BEGIN_SRC scheme
  (define *scheduler* #f)
  (define (init now) (set! *scheduler* (simple-scheduler now)))
  (define (start) (start-scheduler *scheduler*))
  (define (stop) (stop-scheduler *scheduler*))
  (define (*schedule* t f . args) (schedule *scheduler* (make-event t f args)))
  (define (*now*) (now *scheduler*))
#+END_SRC

*** Pairing Heap

   Wikipedia's type definition for pairing heap structure looks like Scheme's
   pairs (surprise =) ). Using them implementation is quite straightforward.

#+NAME: pairing-heap
#+BEGIN_SRC scheme
  ;; we do some #f-punning and don't throw on empty heaps

  (define heap/empty '())

  (define (heap/find-min heap)
    (if (null? heap)
        #f
        (car heap)))

  (define (heap/merge comparator h1 h2)
    (cond
     [(null? h1) h2]
     [(null? h2) h1]
     [(< (comparator (car h1)) (comparator (car h2)))
      (cons (car h1) (cons h2 (cdr h1)))]
     [else
      (cons (car h2) (cons h1 (cdr h2)))]))

  (define (heap/insert comparator elem heap)
    (heap/merge comparator (cons elem '()) heap))

  (define (heap/merge-pairs comparator subheaps)
    (cond
     [(null? subheaps) heap/empty]
     [(null? (cdr subheaps)) (car subheaps)]
     [else (heap/merge comparator
            (heap/merge comparator (car subheaps) (cadr subheaps))
            (heap/merge-pairs comparator (cddr subheaps)))]))

  (define (heap/delete-min comparator heap)
    (if (null? heap)
        heap/empty
        (heap/merge-pairs comparator (cdr heap))))
#+END_SRC

** Remote REPL

  We need own repl server because music doesn't work in geiser repl for somewhat
  reason. The most universal solution would be to have REPL over either UDP or
  TCP with the simplest possible protocol. We want it to be just a carrier,
  everything else should happen inside editor and engine. Sadly Chez Scheme has
  no sockets in its std lib. We are gonna try Aaron W. Hsu's [[https://github.com/arcfide/chez-sockets][chez-sockets]]
  library.

  Actually, we are still able to use Geiser with our REPL server because it
  supports remote REPL. See "Connecting to an external Scheme" at [[http://www.nongnu.org/geiser/geiser_3.html#The-REPL][docs]]. The only
  thing required for it is to load =scheme/chez/geiser/geiser.ss= into the REPL
  thread.

  First, let's create a TCP socket. Here we rely on assumption, that default
  protocol is TCP.

*** TODO ensure that protocol is TCP

  Though Aaron doesn't recommend using blocking sockets, they are so much easier
  for out case! No need to implement polling when waiting for connection or
  receiving value.

  Tried blocking sockets. They work fine by themselves, but play bad with
  =sleep= called from other threads! Falling back to async sockets and polling then.

*** TODO proper socket closing

*** CODE

#+NAME: open-socket
  #+BEGIN_SRC scheme
    (define (open-socket)
      (let ([socket (sock:create-socket
                     sock:socket-domain/internet
                     sock:socket-type/stream
                     sock:socket-protocol/auto)])
        <<bind-socket>>
        <<listen-socket>>
        socket
        ))
  #+END_SRC

  Then we are going to listen address and port for input. We'll make it
  configurable later, let's provide some sensible hardcoded defaults for now.
  /localhost/ is for security reasons, and /37146/ is default Geiser port.

#+NAME: bind-socket
#+BEGIN_SRC scheme
  (sock:bind-socket socket (sock:string->internet-address "127.0.0.1:37146"))
#+END_SRC

  And then let's listen for new connections!

#+NAME: listen-socket
#+BEGIN_SRC scheme
  (sock:listen-socket socket 1024)
#+END_SRC

To actually accept new connections we are going to create new thread and just
run infinite look with =accept-socket= inside. Remember, our socket is
non-blocking so we are to make polling to not eat all CPU by eager calls. After
accepting new connection we'll proceed it in new thread.

#+NAME: accept-connections
#+BEGIN_SRC scheme
  (define (accept-connections repl-server-socket)
    (fork-thread
     (lambda ()
       (let loop ()
         (usleep 0 polling-usec)
         (let-values ([(socket address) (sock:accept-socket repl-server-socket)])
           (when socket
             (printf "New REPL @ ~s\r\n" (sock:internet-address->string address))
             (spawn-remote-repl socket address)))
         (loop)))))
#+END_SRC

  Every new connection accepted would spawn new thread with a REPL loop inside
  it. Because we are using async sockets, we are forced to run actual loop and
  poll socket for values. /50ms/ should be a reasonable polling delay to keep it
  responsive and not resource greedy at the same time. Also
  =receive-from-socket= require to limit maximum message length. Here /65k/ is
  also is a kind of a guess. Chez Scheme operates UTF-8 strings and messages are
  read as bytevectors from sockets, thus we need a transcoder to convert them
  back and forth. Let's put all these requirements to values:

#+NAME: spawn-remote-repl-options
#+BEGIN_SRC scheme
  (define polling-usec 50000)
  (define max-chunk-length 65536)
  (define code-tx (make-transcoder (utf-8-codec) (eol-style lf) (error-handling-mode replace)))
#+END_SRC

  Preparations are straightforward: define some helpers, send initial prompt,
  and start loop.

#+NAME: spawn-remote-repl
#+BEGIN_SRC scheme
  <<spawn-remote-repl-options>>
  (define (spawn-remote-repl socket address)
    (fork-thread
     (lambda ()
       (let* (
              <<repl-send-helpers>>
              )
         (send-prompt)
         <<repl-loop>>
         ))))
#+END_SRC

  Converting messages to bytevectors and sending to proper port is quite
  tedious, let's write a couple of helpers:

#+NAME: repl-send-helpers
#+BEGIN_SRC scheme
  [call-with-send-port
   (lambda (f)
     (let ([response (call-with-bytevector-output-port f code-tx)])
       (sock:send-to-socket socket response address)))]
  [send-prompt
   (lambda ()
     (call-with-send-port (lambda (p) (display "> " p))))]
#+END_SRC

  Loop start with polling delay. For simplicity it's constant and unconditional
  in the beginning of every cycle. If socket is ready and contains non-empty
  message then we do evaluation and send result back. Reading from socket is
  implemented via ports, look at =chez-socket= documentation for more info.

#+NAME: repl-loop
#+BEGIN_SRC scheme
  (let loop ()
    (usleep 0 polling-usec)
    (let-values ([(request address)
                  (sock:receive-from-socket socket max-chunk-length)])
      (if (and request (positive? (bytevector-length request)))
          (call-with-port
           (open-bytevector-input-port request code-tx)
           <<repl-read-eval-print>>
           )
          (loop))))
#+END_SRC

  Our remote REPL supports multi-form messages, therefore we need inner loop to
  read and process them one by one.

#+NAME: repl-read-eval-print
#+BEGIN_SRC scheme
  (lambda (p)
    (do ([x (read p) (read p)])
        ((eof-object? x))
      (printf "> ~s\r\n" x)
      (call-with-send-port
       <<repl-eval-print>>
       ))
    (send-prompt)
    (loop))
#+END_SRC

  Eval and send result back, easy, huh?

#+NAME: repl-eval-print
#+BEGIN_SRC scheme
  (lambda (p)
    (let* (
           <<repl-eval>>
           )
      <<repl-print>>
      )
    )
#+END_SRC

  Tricky part is that we want to:

    - capture output performed by evaluated form
    - capture result of form evaluated
    - don't blow up on exception and capture its message

  That's why we can't just call =eval=

#+NAME: repl-eval
#+BEGIN_SRC scheme
  [result #f]
  [output
   (with-output-to-string
     (lambda ()
       (set! result (try-display #f (eval x)))))]
#+END_SRC

  On the other hand, sending is quite straightforward, because we need just to
  write to port provided by =call-with-send-port=

#+NAME: repl-print
#+BEGIN_SRC scheme
  (printf "| ~s\r\n" output)
  (printf "< ~s\r\n" result)
  (display output p)
  (display result p)
  (newline p)
#+END_SRC

*** TODO stop loop and close socket on disconnect

*** Start REPL server

#+NAME: start-repl-server
#+BEGIN_SRC scheme
  (define (start-repl-server)
    (accept-connections (open-socket)))
#+END_SRC

* Core

  Woohoo! Naive [[Kernel]] draft is here and we could start to explore Core basics
  of Sound. At this point Ad Libitum splits into into interwinded parts: the
  framework and the book. In the framework we are going to grow all necessary
  instruments for live coding. In the book we are going to use those instruments
  to experiment with sound.

** Math

   Before diving into the abyss of digital music let's define several useful
   basic math constants and functions.

#+NAME: basic-math
#+BEGIN_SRC scheme
  (define pi (inexact (* (asin 1.0) 2)))
  (define two-pi (fl* 2.0 pi))
  (alias π pi)
  (alias 2π two-pi)

  (define (mod1 x)
    (mod x 1.0))

  (define (random-amplitude)
    (- (random 2.0) 1.0))

  (define (midi2frq pitch)
    (if (<= pitch 0.0) 0.0
        (* 440.0 (expt 2.0 (/ (- pitch 69.0) 12.0)))))

  (define (frq2midi freq)
    (if (<= freq 0.0) 0.0
        (+ (* 12.0 (log (/ freq 440.0) 2.0)) 69.0)))

  (define (amp2db x)
    (* 20.0 (log x 10)))

  (define (db2amp x)
    (expt 10.0 (/ x 20.0)))
#+END_SRC

** Generators

   Sound is about motion. About our mean of sensing somewhat periodic motion
   a.k.a waves. The higher is period, the higher is signal pitch. Waveform
   determines character of signal. And irregularities determine... Something.
   Noise? Personality? We'll try to discover.

   Though signal demonstration usually started with sine waveform as the most
   recognizable and surprisingly pleasant one, we are going to start with
   computationally simplest one (though potentially not the fastest to calculate).

   Technically, the simplest generator is just a constant value, no motion,
   silence. But which stands next in simplicity?

   It's the signal, which is in one position half of a time and in another position
   in another half. By "time" here I mean one cycle, one period of signal.

   But first let define a couple of constants to start with. It's a frequency we
   want to hear and its derivatives.

#+NAME: tuner-constants
#+BEGIN_SRC scheme
  (define tuner-frequency 440.0)
  (define tuner-period (/ 1.0 tuner-frequency))
  (define tuner-half-period (/ tuner-period 2.0))
#+END_SRC

#+NAME: simplest-oscillator
#+BEGIN_SRC scheme
  (define (simplest-oscillator time channel)
    (if (> (mod time tuner-period) tuner-half-period)
        1.0
        -1.0))
#+END_SRC

   Actually, this waveform is called square, because of shape. Once we'll add
   visualisation library to Ad Libitum, before that try to draw function plot by hands.

   Feel free to experiment with different waveforms, we will do it together
   later. Let's step back and look at our example and try to come up with useful
   abstraction. Our DSP callback has signature =f(time, channel) -> amplitude=,
   which is the basis for any audio signal. But what prevents us using audio
   signals as the main medium for building sound? Nothing! It's even very handy.
   Audio signals then are capable of control parameters of other signal,
   naturally forming audio graph. And Chez Scheme should optimize that CSP-like
   style well. But we need to think carefully ahead of time about signature
   itself. What if later we want add additional information flowing every
   sample? What if returning just float is not enough to express all we want?
   Because it's very beautiful, that every signal could be either interpreted as
   a DSP callback alone, and could be passed to other signals. But in the latter
   case sometimes it's not enough to communicate between signals with a single
   float. Perhaps something like =f(time, channel, data) -> (amplitude, data)=
   could do the job? Where structure of =data= is determined by your
   application, and parent signal is responsible for using or discarding the
   =data= returned by child signal. OTOH, =data= in parameters plays like a
   container for some global state to survive between samples, and we could
   replace it with actual global or closured state in our application. The same
   thing for returned data.

   Let's start with =f(time, channel) -> amplitude= then and pray that we didn't
   overlook something important.

   To ease writing signal creators and spotting them in code let's introduce
   small helper:

#+NAME: signal
#+BEGIN_SRC scheme
  (define-syntax (signal stx)
    (syntax-case stx ()
      [(k body ...)
       (with-syntax ([time (datum->syntax #'k 'time)]
                     [channel (datum->syntax #'k 'channel)])
         #'(λ (time channel) body ...))]))

  (alias ~< signal)

  (define-syntax (define-signal stx)
    (syntax-case stx ()
      [(k args body ...)
       (with-syntax ([time (datum->syntax #'k 'time)]
                     [channel (datum->syntax #'k 'channel)])
         #'(define args
             (λ (time channel)
               body ...)))]))

  (alias define~ define-signal)
#+END_SRC

   The most basic signal is just a constant one, which is essentially created by
   our shiny new syntax =(~< amplitude)=. But =~<= is a macro and having
   function is useful for composition matters:

#+NAME: constant
#+BEGIN_SRC scheme
  (define~ (constant amplitude) amplitude)
#+END_SRC

   Then we are able to define =silence= as follows:

#+NAME: silence
#+BEGIN_SRC scheme
  (define~ silence 0.0)
  (alias ∅ silence)
#+END_SRC

   Quick question for self-test: what sound would =(~< 1.0)= produce?

   For composing signal creators we could define a helper, which is the regular
   function composition!

#+NAME: compose
#+BEGIN_SRC scheme
  (define (compose . fns)
    (define (make-chain fn chain)
      (λ args (call-with-values (cut apply fn args) chain)))
    (reduce make-chain values fns))

  (alias ∘ compose)
#+END_SRC

   For unifying oscillators we are going to define signal which will care about
   converting time to proper phase. When you deal with periodic signals it's
   important to distinguish time from phase, because at different frequencies
   phase would be different at the given point of time. Which is okay when
   frequency of you oscillator is constant. When it's variable as in FM
   synthesis, you need to track phase for your oscillator to make it behave
   properly. Let's create special signal =phasor= for that purpose. It will take
   =frequency= signal and =phase0= signal and return signal of phase in =[0, 1)=
   half-interval.

   Here we have an opportunity for a small syntactic improvement. The use-case
   when signal is applied to parameters named exactly time and channel in
   current scope is very common. Let's create a special syntax for it.

#+NAME: deref-signal
#+BEGIN_SRC scheme
  (define-syntax (<~ stx)
    (syntax-case stx ()
      [(k signal)
       (with-syntax ([time (datum->syntax #'k 'time)]
                     [channel (datum->syntax #'k 'channel)])
         #'(signal time channel))]))
#+END_SRC

   Let's use it in our phasor signal:

#+NAME: phasor
#+BEGIN_SRC scheme
  ;; TODO make it robust to multiple calls per sample?
  (define (dynamic-phasor frequency phase0)
    (let ([previous-phase (make-vector *channels* 0.0)])
      (~<
       (let* ([phase-delta (/ (<~ frequency) *sample-rate*)]
              [next-phase (-> (vector-ref previous-phase channel)
                              (+ phase-delta)
                              (mod 1.0))])
         (vector-set! previous-phase channel next-phase)
         (-> (<~ phase0)
             (+ next-phase)
             (mod 1.0))))))

  (define~ (static-phasor frequency phase0)
    (-> time (* frequency) (+ phase0) (mod 1.0)))

  (define phasor
    (case-lambda
      [(frequency phase0)
       (if (number? frequency)
           (static-phasor frequency phase0)
           (dynamic-phasor frequency phase0))]
      [(frequency)
       (if (number? frequency)
           (static-phasor frequency 0.0)
           (dynamic-phasor frequency ∅))]))
#+END_SRC

   Then basic waveforms are defined in very clean way:

#+NAME: waveforms
#+BEGIN_SRC scheme
  (define~ (sine phase)
    (sin (* 2π (<~ phase))))

  (define~ (cosine phase)
    (cos (* 2π (<~ phase))))

  (define~ (square phase)
    (if (< (<~ phase) 0.5)
        1.0
        -1.0))

  ;; when `pulse-width' is `(constant 0.5)' it's identical to `square-wave'
  (define~ (pulse pulse-width phase)
    (if (< (<~ phase) (<~ pulse-width))
        1.0
        -1.0))

  (define~ (tri phase)
    (let ([phase (<~ phase)])
      (if (< phase 0.5)
          (- (* 4.0 phase) 1.0)
          (+ (* -4.0 phase) 3.0))))

  (define~ (saw phase)
    (- (* 2.0 (<~ phase)) 1.0))

  (define (sampler table phase)
    (let ([n (fixnum->flonum (vector-length table))])
      (~< (vector-ref table (flonum->fixnum (fltruncate (fl* (<~ phase) n)))))))

  (define sine* (∘ sine phasor))
  (define cosine* (∘ cosine phasor))
  (define square* (∘ square phasor))
  (define pulse*
    (case-lambda
      [(pulse-width frequency phase0)
       (pulse pulse-width (phasor frequency phase0))]
      [(pulse-width frequency)
       (pulse* pulse-width frequency ∅)]))
  (define tri* (∘ tri phasor))
  (define saw* (∘ saw phasor))
#+END_SRC

   Before we play something interesting with stuff we already defined we need
   one more helper. Drawback of our way of composition of signals is that we
   can't change code of one of them in live and make changed reloaded live, even
   if signal is not anonymous and was defined as a top-level variable. For
   signal which we plan to reload dynamically we are going to introduce wrapper
   which will look for given signal's symbol on every invocation:

#+NAME: live-signal
#+BEGIN_SRC scheme
  (define~ (live-signal symbol)
    (<~ (top-level-value symbol)))
#+END_SRC

   Also useful to have live value counterpart:

#+NAME: live-value
#+BEGIN_SRC scheme
  (define~ (live-value symbol)
    (top-level-value symbol))
#+END_SRC

   Next step is implementation of signal arithmetics to ease their mixing and
   matching.

#+NAME: signal-operators
#+BEGIN_SRC scheme
  (define~ (signal-sum* x y)
    (+ (<~ x) (<~ y)))

  (define (signal-sum x . xs)
    (fold-left signal-sum* x xs))

  (define~ (signal-prod* x y)
    (* (<~ x) (<~ y)))

  (define (signal-prod x . xs)
    (fold-left signal-prod* x xs))

  (define (signal-diff x . xs)
    (let ([y (apply signal-sum xs)])
      (~< (- (<~ x) (<~ y)))))

  (define (signal-div x . xs)
    (let ([y (apply signal-prod xs)])
      (~< (/ (<~ x) (<~ y)))))

  (alias +~ signal-sum)
  (alias *~ signal-prod)
  (alias -~ signal-diff)
  (alias /~ signal-div)

  (define ∑ (cut apply signal-sum <...>))

  (define ∏ (cut apply signal-prod <...>))

  ;; normalizing +~
  (define (mix . args)
    (*~ (∑ args) (constant (inexact (/ (length args))))))

  (define~ (pan p)
    (let ([p (* 0.5 (+ 1.0 (<~ p)))])
      (if (zero? channel)
          (- 1.0 p)
          p)))
#+END_SRC

** Envelopes

*** ADSR

   ADSR envelope shapes signal with polyline described with 4 parameters:

   - Attack time is the time taken for initial run-up of level from nil to peak,
     beginning when the key is first pressed.
   - Decay time is the time taken for the subsequent run down from the attack
     level to the designated sustain level.
   - Sustain level is the level during the main sequence of the sound's
     duration, until the key is released.
   - Release time is the time taken for the level to decay from the sustain
     level to zero after the key is released.

   (Thanks, [[https://en.wikipedia.org/wiki/Synthesizer#Attack_Decay_Sustain_Release_.28ADSR.29_envelope][Wikipedia]])

   Two more parameter required to apply envelope in real performance: note's
   moments of start and end. To make envelope generic and open for crazy
   experiments all 6 parameters are going to be signals:

#+NAME: adsr
#+BEGIN_SRC scheme
  (define~ (adsr start end attack decay sustain release)
    (let ([end (<~ end)])
      (if (<= end time)
          ;; NOTE OFF
          (let ([Δt (- time end)]
                [r (<~ release)])
            (if (and (positive? r)
                     (<= Δt r))
                (* (- 1.0 (/ Δt r)) (<~ sustain))
                0.0))
          ;; NOTE ON
          (let ([start (<~ start)])
            (if (<= start time)
                (let ([Δt (- time start)]
                      [a (<~ attack)])
                  (if (and (positive? a)
                           (<= Δt a))
                      (/ Δt a)
                      (let ([Δt (- Δt a)]
                            [d (<~ decay)]
                            [s (<~ sustain)])
                        (if (and (positive? d)
                                 (<= Δt d))
                            (- 1.0 (* (- 1.0 s) (/ Δt d)))
                            s))))
                0.0)))))
#+END_SRC

   Let's test it with simple note play:

#+NAME: play-note
#+BEGIN_SRC scheme
  (define (simple-instrument start end freq a d s r)
    (let* ([start (live-value start)]
           [end (live-value end)]
           [freq (live-value freq)]
           [osc (sine-wave (phasor freq))]
           [env (adsr start end (~< a) (~< d) (~< s) (~< r))])
      (*~ env osc)))

  (define (make-play-note start end frequency)
    (λ (freq dur)
      (set-top-level-value! frequency freq)
      (set-top-level-value! start (now))
      (set-top-level-value! end (+ (now) dur))))

  ;; (define start 0.0)
  ;; (define end 1.0)
  ;; (define frequency 440.0)

  ;; (define inst (simple-intrument 'start 'end 'frequency 0.3 0.5 0.8 1.0))
  ;; (define play-note (make-play-note 'start 'end 'frequency))

  ;; (sound:set-dsp! (live-signal 'inst))
  ;; (play-note 440.0 1.1)
#+END_SRC

   We return to instrument concept later and come up with better design for it.

*** Impulse

    Another simple though useful envelope is impulse.

#+NAME: impulse
#+BEGIN_SRC scheme
  (define~ (impulse start apex)
    (let ([start (<~ start)])
      (if (<= start time)
          (let ([h (/ (- time start)
                      (- (<~ apex) start))])
            (* h (exp (- 1.0 h))))
          0.0)))
#+END_SRC


** Metronome

* Std

** FFT
** Filters
** Instruments



** Scales
** Rhythm
** MIDI

#+NAME: midi
#+BEGIN_SRC scheme
  <<try>>

  (define (*on-note-on* timestamp data1 data2 channel)
    (printf "~s:~s:~s:~s\r\n" timestamp data1 data2 channel))

  (define (*on-note-off* timestamp data1 data2 channel)
    (printf "~s:~s:~s:~s\r\n" timestamp data1 data2 channel))

  (define (*on-cc* timestamp data1 data2 channel)
    (printf "~s:~s:~s:~s\r\n" timestamp data1 data2 channel))

  (define (set-note-on! f) (set! *on-note-on* f))
  (define (set-note-off! f) (set! *on-note-off* f))
  (define (set-cc! f) (set! *on-cc* f))

  (define *polling-cycle* 5e-3)

  (define *stream* #f)
  (define *scheduler* #f)

  (define (process-event timestamp type data1 data2 channel)
    (cond
      [(= type pm:*midi-note-on*) (*on-note-on* timestamp data1 data2 channel)]
      [(= type pm:*midi-note-off*) (*on-note-off* timestamp data1 data2 channel)]
      [(= type pm:*midi-cc*) (*on-cc* timestamp data1 data2 channel)]
      [else (printf "Unsupported event type: ~s\r\n" type)]))

  (define (make-safe-process-event timestamp)
    (lambda args
      (try #f (apply process-event timestamp args))))

  (define (process-events)
    (let ([timestamp (scheduler:now *scheduler*)])
      (pm:read *stream* (make-safe-process-event timestamp))
      (scheduler:schedule *scheduler*
                          (+ timestamp *polling-cycle*)
                          process-events)))

  (define (start now)
    (pm:init)
    (set! *stream* (pm:open-input 0))
    (set! *scheduler* (scheduler:simple-scheduler now))
    (scheduler:start-scheduler *scheduler*)
    (process-events))

  (define (stop)
    (scheduler:stop-scheduler *scheduler*)
    (pm:close *stream*)
    (pm:terminate))
#+END_SRC
* Misc

  =try= is a little helper to guard function calls in vital loops: dsp,
  scheduler, remote repl.

#+NAME: try
#+BEGIN_SRC scheme
  ;; (define (try thunk default)
  ;;   (call/cc
  ;;    (lambda (k)
  ;;      (with-exception-handler
  ;;          (lambda (x) (k default))
  ;;        thunk))))

  (define-syntax try
    (syntax-rules ()
      [(_ default e1 e2 ...)
       (guard (x [else default]) e1 e2 ...)]))
#+END_SRC

#+NAME: try-display
#+BEGIN_SRC scheme
  ;; (define (try-display thunk default)
  ;;   (call/cc
  ;;    (lambda (k)
  ;;      (with-exception-handler
  ;;          (lambda (x)
  ;;            (display-condition x)
  ;;            (k default))
  ;;        thunk))))

  (define-syntax try-display
    (syntax-rules ()
      [(_ default e1 e2 ...)
       (guard (x [else (begin
                         (display-condition x)
                         default)])
         e1 e2 ...)]))
#+END_SRC

  To import =chez-soundio= and =chez-sockets= we must add respective folders to =library-directories=
  To do that let's create a couple of helpers:

#+NAME: add-library-directories
#+BEGIN_SRC scheme
  (define (add-library-directory dir)
    (library-directories
     (cons dir (library-directories))))

  (define (add-library-directories . dirs)
    (unless (null? dirs)
      (add-library-directory (car dirs))
      (apply add-library-directories (cdr dirs))))

  (add-library-directories
   "./chez-soundio"
   "./chez-portmidi"
   "./chez-sockets")
#+END_SRC

  Also let's define several useful aliases and finally start our services:

#+NAME: ad-libitum-init
#+BEGIN_SRC scheme
  (sound:start)

  (define *sound-start-time* (current-time))

  (define (now)
    (let ([Δt (time-difference (current-time) *sound-start-time*)])
      (inexact (+ (time-second Δt)
                  (* 1e-9 (time-nanosecond Δt))))))

  (alias schedule scheduler:*schedule*)
  (alias callback schedule)

  ;; in case of emergency ☺
  (alias h! sound:hush!)

  (alias play! sound:set-dsp!)

  (scheduler:init now)
  (scheduler:start)
  (repl:start-repl-server)
#+END_SRC

  Tuner stuff to test everything is working:

#+NAME: test-tuner
#+BEGIN_SRC scheme
  (define (tuner time channel)
    (sin (* 2π time tuner-frequency)))

  ;; (sound:set-dsp! tuner)
#+END_SRC

  Some stuff about time and scales to be moved to appropriate sections when
  we'll come to them:

#+NAME: sandbox
#+BEGIN_SRC scheme
  (define (random-choice list)
    (list-ref list (random (length list))))

  (define chromatic-scale-half-step
    (expt 2 1/12))

  (define second-interval (expt chromatic-scale-half-step 2))
  (define third-interval (expt chromatic-scale-half-step 4))
  (define perfect-fourth-interval (expt chromatic-scale-half-step 5))
  (define perfect-fifth-interval (expt chromatic-scale-half-step 7))
  (define major-sixth-interval (expt chromatic-scale-half-step 9))
  (define major-seventh-interval (expt chromatic-scale-half-step 11))
  (define perfect-octave-interval (expt chromatic-scale-half-step 12))
  (define minor-second-interval (expt chromatic-scale-half-step 1))
  (define minor-third-interval (expt chromatic-scale-half-step 3))
  (define minor-sixth-interval (expt chromatic-scale-half-step 8))
  (define minor-seventh-interval (expt chromatic-scale-half-step 11))
  (define triton-interval (expt chromatic-scale-half-step 11))

  ;; TODO excercise: represent scales as whole/half steps

  (define chromatic-scale '(1 2 3 4 5 6 7 8 9 10 11 12))
  (define pentatonic-scale '(1 3 5 8 10))
  (define major-scale '(1 3 5 6 8 10 12))
  (define minor-scale '(1 3 4 6 8 9 11))

  (define (make-scale base-frequency scale)
    (map (λ (x) (* base-frequency (expt chromatic-scale-half-step (- x 1)))) scale))

  ;;

  (define (unroll signal period sample-rate)
    (let* ([n (exact (truncate (* period sample-rate)))]
           [table (make-vector n)])
      (do ([i 0 (+ i 1)])
          ((= i n))
        (vector-set! table i (inexact (signal (/ i sample-rate) 0))))
      (cut sampler table <>)))

  ;; (define table-sine-wave (unroll (simple-osc 0.1) 10 96000))

  (define (make-overtone amplitudes wave frequency phase0)
    (∑ (map
        (λ (amplitude factor)
          (*~ amplitude
              (wave (osc:phasor (*~ (~< factor) frequency) phase0))))
        amplitudes
        (iota (length amplitudes)))))

  (define (fix-duration duration)
    (let* ([start (now)]
           [end (+ start duration)])
      (values (~< start) (~< end))))

  (define~ (amp2phase s)
    (* 0.5 (+ 1.0 (<~ s))))

  (define (make-polyphony n make-voice)
    (let ([voices (make-vector n ∅)]
          [cursor 0])
      (let ([signal
             (apply mix (list-ec (: i n) (~< (<~ (vector-ref voices i)))))]
            [play-note
             (λ args
               (let ([voice (apply make-voice args)])
                 (vector-set! voices cursor voice)
                 (set! cursor (mod (+ cursor 1) n))
                 voice))])
        (values signal play-note))))

  (define (make-static-polyphony n make-voice)
    ;; (make-voice) -> (list signal play-note)
    (let ([voices (list-ec (: i n) (make-voice))]
          [cursor 0])
      (let ([signal (apply mix (map first voices))]
            [play-note
             (λ args
               (apply (second (vector-ref voices cursor)) args)
               (set! cursor (mod (+ cursor 1) n)))])
        (values signal play-note))))

  (define (time->beat time bpm)
    (-> time (* bpm) (/ 60) (round)))

  (define (beat->time beat bpm)
    (-> beat (* 60) (/ bpm)))

  (define (next-beat time bpm)
    (beat->time (+ 1 (time->beat time bpm)) bpm))

  (define (metro bpm . args)
    (apply schedule (next-beat (now) bpm) args))

  (define *bpm* 60.0)

  (define (*metro* . args)
    (apply metro *bpm* args))

  (define (play-pattern pattern sound beat)
    (let ([n (length pattern)])
      (when (positive? (list-ref pattern (mod (exact beat) n)))
        (sound))))

  (define~ (delay t s)
    (let ([t (<~ t)])
      (s  (- time t) channel)))

  (define *max-line-duration* 1)

  (define (echo delay feedback signal)
    (let ([line-size (* *max-line-duration* *sample-rate*)]
          [lines (make-vector *channels*)]
          [cursor -1])
      (do ([i 0 (+ i 1)])
          ((= i *channels*) 0)
        (vector-set! lines i (make-vector line-size 0.0)))
      (~<
       (when(zero? channel)
         (set! cursor (mod (+ cursor 1) line-size)))
       (let ([line (vector-ref lines channel)]
             [x (<~ signal)]
             [delay (flonum->fixnum (round (* (<~ delay) *sample-rate*)))]
             [feedback (<~ feedback)])
         (let* ([i (mod (+ line-size (- cursor delay)) line-size)]
                [y (vector-ref line i)]
                [z (+ x (* feedback y))])
           (vector-set! line cursor z)
           z)))))

  (define (lpf-frequency->α frequency)
    (let ([k (* frequency *sample-angular-period*)])
      (/ k (+ k 1))))

  (define (hpf-frequency->α frequency)
    (let ([k (* frequency *sample-angular-period*)])
      (/ (+ k 1))))

  (define (lpf frequency x)
    (let ([ys (make-vector *channels* 0.0)])
      (~<
       (let* ([y-1 (vector-ref ys channel)]
              [α (lpf-frequency->α (<~ frequency))])
         (let ([y (+ y-1 (* α (- (<~ x) y-1)))])
           (vector-set! ys channel y)
           y)))))

  (define (hpf frequency x)
    (let ([xs (make-vector *channels* 0.0)]
          [ys (make-vector *channels* 0.0)])
      (~<
       (let ([x-1 (vector-ref xs channel)]
             [y-1 (vector-ref ys channel)]
             [x (<~ x)]
             [α (hpf-frequency->α (<~ frequency))])
         (let ([y (* α (+ y-1 (- x x-1)))])
           (vector-set! xs channel x)
           (vector-set! ys channel y)
           y)))))

  (define (make-lpf-coefficients sin-ω cos-ω α)
    (let ([b0 (* 0.5 (- 1.0 cos-ω))])
      (values
       b0             ;; b0
       (- 1.0 cos-ω)  ;; b1
       b0             ;; b2
       (+ 1.0 α)      ;; a0
       (* -2.0 cos-ω) ;; a1
       (- 1.0 α)      ;; a2
       )))

  (define (make-hpf-coefficients sin-ω cos-ω α)
    (let ([b0 (* 0.5 (+ 1.0 cos-ω))])
      (values
       b0             ;; b0
       (- -1.0 cos-ω) ;; b1
       b0             ;; b2
       (+ 1.0 α)      ;; a0
       (* -2.0 cos-ω) ;; a1
       (- 1.0 α)      ;; a2
       )))

  (define (make-biquad-filter make-coefficients)
    (λ (Q frequency x)
      (let ([xs-1 (make-vector *channels* 0.0)]
            [xs-2 (make-vector *channels* 0.0)]
            [ys-1 (make-vector *channels* 0.0)]
            [ys-2 (make-vector *channels* 0.0)])
        (~<
         (let ([x-1 (vector-ref xs-1 channel)]
               [x-2 (vector-ref xs-2 channel)]
               [y-1 (vector-ref ys-1 channel)]
               [y-2 (vector-ref ys-2 channel)]
               [x (<~ x)]
               [Q (<~ Q)]
               [frequency (<~ frequency)])
           (let* ([ω (* frequency *sample-angular-period*)]
                  [sin-ω (sin ω)]
                  [cos-ω (cos ω)]
                  [α (/ sin-ω (* 2.0 Q))])
             (let-values ([(b0 b1 b2 a0 a1 a2) (make-coefficients sin-ω cos-ω α)])
               (let ([y (-
                         (+
                          (* (/ b0 a0) x)
                          (* (/ b1 a0) x-1)
                          (* (/ b2 a0) x-2))
                         (* (/ a1 a0) y-1)
                         (* (/ a2 a0) y-2))])
                 (vector-set! xs-1 channel x)
                 (vector-set! xs-2 channel x-1)
                 (vector-set! ys-1 channel y)
                 (vector-set! ys-2 channel y-1)
                 y))))))))
#+END_SRC

* Files :noexport:

#+NAME: ad-libitum.ss
#+BEGIN_SRC scheme :tangle ad-libitum.ss :noweb yes :mkdirp yes :paddle no
  <<add-library-directories>>

  (import (ad-libitum common))

  (voodoo)

  (import (chezscheme)
          (srfi s1 lists)
          (srfi s26 cut)
          (srfi s42 eager-comprehensions)
          (ad-libitum signal)
          (prefix (ad-libitum oscillator) osc:)
          (prefix (ad-libitum envelope) env:)
          (prefix (ad-libitum noise) noise:)
          (prefix (ad-libitum sound) sound:)
          (prefix (ad-libitum scheduler) scheduler:)
          (prefix (ad-libitum repl) repl:)
          (prefix (ad-libitum midi) midi:)
          )

  <<ad-libitum-init>>
  <<tuner-constants>>
  <<test-tuner>>
#+END_SRC

#+NAME: common.ss
#+BEGIN_SRC scheme :tangle ad-libitum/common.ss :noweb yes :mkdirp yes :paddle no
  #!chezscheme
  (library (ad-libitum common (1))
    (export voodoo λ id >>> >> -> ->>
            compose ∘ pi two-pi π 2π
            random-amplitude
            midi2frq frq2midi
            amp2db db2amp
            *channels* *sample-rate* *sample-angular-period*)
    (import (chezscheme)
            (only (srfi s1 lists) reduce)
            (srfi s26 cut)
            (prefix (ad-libitum sound) sound:))

    (alias *sample-rate* sound:*sample-rate*)
    (alias *channels* sound:*channels*)

    (define (voodoo)
      (collect-maximum-generation 254)
      (collect-generation-radix 2)
      ;; (eval-when (compile) (optimize-level 3))
      (optimize-level 2)
      )

    ;; symbols
    (alias λ lambda)

    ;; can't live without
    (define (id x) x)

    <<compose>>
    <<basic-math>>

    (define *sample-angular-period* (/ 2π *sample-rate*))

    ;; threading

    (define-syntax (>>> stx)
      (syntax-case stx ()
        [(_ it x) #'x]
        [(_ it x (y ...) rest ...)
         #'(let ([it x])
             (>>> it (y ...) rest ...))]))

    (define-syntax (>> stx)
      (syntax-case stx ()
        [(k rest ...)
         (with-syntax ([^ (datum->syntax #'k '^)])
           #'(>>> ^ rest ...))]))

    (define-syntax ->
      (syntax-rules ()
        [(_ x) x]
        [(_ x (y z ...) rest ...)
         (-> (y x z ...) rest ...)]))

    (define-syntax ->>
      (syntax-rules ()
        [(_ x) x]
        [(_ x (y ...) rest ...)
         (->> (y ... x) rest ...)])))
#+END_SRC

#+NAME: signal.ss
#+BEGIN_SRC scheme :tangle ad-libitum/signal.ss :noweb yes :mkdirp yes :paddle no
  #!chezscheme
  (library (ad-libitum signal (1))
    (export signal ~< <~ define-signal define~ constant silence ∅ live-signal live-value
            signal-sum signal-prod signal-diff signal-div
            +~ *~ -~ /~ ∑ ∏ mix pan)
    (import (chezscheme)
            (srfi s26 cut)
            (ad-libitum common))
    <<signal>>
    <<constant>>
    <<silence>>
    <<deref-signal>>
    <<live-signal>>
    <<live-value>>
    <<signal-operators>>
    )
#+END_SRC

#+NAME: oscillator.ss
#+BEGIN_SRC scheme :tangle ad-libitum/oscillator.ss :noweb yes :mkdirp yes :paddle no
  #!chezscheme
  (library (ad-libitum oscillator (1))
    (export phasor
            sine cosine square pulse tri saw sampler
            sine* cosine* square* pulse* tri* saw*
            )
    (import (chezscheme)
            (ad-libitum common)
            (ad-libitum signal))

    <<phasor>>
    <<waveforms>>
    )
#+END_SRC

#+NAME: noise.ss
#+BEGIN_SRC scheme :tangle ad-libitum/noise.ss :noweb yes :mkdirp yes :paddle no
  (library (ad-libitum noise (1))
    (export white)
    (import (chezscheme)
            (ad-libitum common)
            (ad-libitum signal))

    (define~ white (random-amplitude))
    )
#+END_SRC

#+NAME: envelope.ss
#+BEGIN_SRC scheme :tangle ad-libitum/envelope.ss :noweb yes :mkdirp yes :paddle no
  (library (ad-libitum envelope (1))
    (export adsr impulse)
    (import (chezscheme)
            (ad-libitum common)
            (ad-libitum signal))
    <<adsr>>
    <<impulse>>
    )
#+END_SRC

#+NAME: sound.ss
#+BEGIN_SRC scheme :tangle ad-libitum/sound.ss :noweb yes :mkdirp yes :paddle no
  (library (ad-libitum sound (1))
    (export start set-dsp! hush! *sample-rate* *channels*)
    (import (chezscheme) (prefix (soundio) soundio:))
    <<sound>>
    )
#+END_SRC

#+NAME: scheduler.ss
#+BEGIN_SRC scheme :tangle ad-libitum/scheduler.ss :noweb yes :mkdirp yes :paddle no
  (library (ad-libitum scheduler (1))
    (export start stop init
            start-scheduler stop-scheduler schedule now
            simple-scheduler
            *schedule* *now*)
    (import (chezscheme)
            (only (soundio) usleep))
    <<try>>
    <<pairing-heap>>
    <<scheduler>>
    <<easy-scheduler>>
    )
#+END_SRC

#+BEGIN_SRC scheme :tangle ad-libitum/repl.ss :noweb yes :mkdirp yes :paddle no
  (library (ad-libitum repl (1))
    (export start-repl-server)
    (import (chezscheme)
            (only (soundio) usleep)
            (prefix (bsd-sockets) sock:))
    <<try-display>>
    <<open-socket>>
    <<spawn-remote-repl>>
    <<accept-connections>>
    <<start-repl-server>>
    )
#+END_SRC

#+NAME: violet.ss
#+BEGIN_SRC scheme :tangle violet.ss :noweb yes :mkdirp yes :paddle no
  (load "ad-libitum.ss")

  <<simplest-oscillator>>
  <<sandbox>>
  <<play-note>>
#+END_SRC

#+NAME: midi.ss
#+BEGIN_SRC scheme :tangle ad-libitum/midi.ss :noweb yes :paddle no
  (library (ad-libitum midi (1))
    (export start stop set-note-on! set-note-off! set-cc!)
    (import (chezscheme)
            (prefix (ad-libitum scheduler) scheduler:)
            (prefix (portmidi) pm:))
    <<midi>>
    )
#+END_SRC

** Tests

#+NAME: test-runner.ss
#+BEGIN_SRC  scheme :tangle ad-libitum/test-runner.ss :noweb yes :mkdirp yes :paddle no
  (import
   (chezscheme)
   (srfi s42 eager-comprehensions)
   (srfi s64 testing)
   (ad-libitum common)
   (ad-libitum signal)
   )


  (define (test-on-test-end-simple runner)
    (let ((log (test-runner-aux-value runner))
          (kind (test-result-ref runner 'result-kind)))
      (if (memq kind '(fail xpass))
          (let* ((results (test-result-alist runner))
                 (source-file (assq 'source-file results))
                 (source-line (assq 'source-line results))
                 (test-name (assq 'test-name results))
                 (expected-value (assq 'expected-value results))
                 (actual-value (assq 'actual-value results))
                 )
            (if (or source-file source-line)
                (begin
                  (if source-file (display (cdr source-file)))
                  (display ":")
                  (if source-line (display (cdr source-line)))
                  (display ": ")))
            (display (if (eq? kind 'xpass) "XPASS" "FAIL"))
            (if test-name
                (begin
                  (display " ")
                  (display (cdr test-name))))
            (newline)
            (printf "Expected: ~s\r\nActual: ~s\r\n"
                    (cdr expected-value)
                    (cdr actual-value))))
      (if (output-port? log)
          (begin
            (display "Test end:" log)
            (newline log)
            (let loop ((list (test-result-alist runner)))
              (if (pair? list)
                  (let ((pair (car list)))
                    ;; Write out properties not written out by on-test-begin.
                    (if (not (memq (car pair)
                                   '(test-name source-file source-line source-form)))
                        (%test-write-result1 pair log))
                    (loop (cdr list)))))))))

  (define (my-test-runner)
    (let ((runner (test-runner-simple)))
      (test-runner-reset runner)
      ;; (test-runner-on-group-begin! runner test-on-group-begin-simple)
      ;; (test-runner-on-group-end! runner test-on-group-end-simple)
      ;; (test-runner-on-final! runner test-on-final-simple)
      ;; (test-runner-on-test-begin! runner test-on-test-begin-simple)
      (test-runner-on-test-end! runner test-on-test-end-simple)
      ;; (test-runner-on-bad-count! runner test-on-bad-count-simple)
      ;; (test-runner-on-bad-end-name! runner test-on-bad-end-name-simple)
      runner))

  (test-runner-current (my-test-runner))
#+END_SRC

#+NAME: test-oscillator.ss
#+BEGIN_SRC  scheme :tangle ad-libitum/test-oscillator.ss :noweb yes :mkdirp yes :paddle no
  (import (ad-libitum oscillator))

  (include "ad-libitum/test-runner.ss")

  (test-group
   "phasor"

   (let ([phase0 (~< 0.25)]
         [antiphase0 (~< 0.75)])
     (do-ec
      (:real-range frequency 0.0 440.0 1.23456)
      (:real-range time 0.0 1.0 0.001)
      (: channel 2)
      (test-approximate "antiphase"
        0.0
        (+ ((sine (phasor (~< frequency) phase0)) time channel)
           ((sine (phasor (~< frequency) antiphase0)) time channel))
        1e-14))))
#+END_SRC
